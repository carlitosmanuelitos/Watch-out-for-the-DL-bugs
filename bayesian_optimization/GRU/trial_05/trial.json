{"trial_id": "05", "hyperparameters": {"space": [{"class_name": "Int", "config": {"name": "num_gru_layers", "default": null, "conditions": [], "min_value": 1, "max_value": 4, "step": 1, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "gru_units_0", "default": null, "conditions": [], "min_value": 32, "max_value": 256, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "gru_activation_0", "default": "tanh", "conditions": [], "values": ["tanh", "sigmoid", "relu"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "gru_recurrent_activation_0", "default": "sigmoid", "conditions": [], "values": ["sigmoid", "tanh", "relu"], "ordered": false}}, {"class_name": "Float", "config": {"name": "gru_recurrent_dropout_0", "default": 0.0, "conditions": [], "min_value": 0.0, "max_value": 0.5, "step": 0.05, "sampling": "linear"}}, {"class_name": "Boolean", "config": {"name": "gru_return_sequences", "default": false, "conditions": []}}, {"class_name": "Float", "config": {"name": "gru_dropout_0", "default": 0.0, "conditions": [], "min_value": 0.0, "max_value": 0.5, "step": 0.05, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "dense_units", "default": null, "conditions": [], "min_value": 1, "max_value": 3, "step": 1, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "dense_activation", "default": "relu", "conditions": [], "values": ["relu", "linear", "sigmoid", "tanh"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "optimizer", "default": "adam", "conditions": [], "values": ["adam", "sgd", "rmsprop", "adagrad", "adadelta", "nadam", "ftrl"], "ordered": false}}, {"class_name": "Int", "config": {"name": "gru_units_1", "default": null, "conditions": [], "min_value": 32, "max_value": 256, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "gru_activation_1", "default": "tanh", "conditions": [], "values": ["tanh", "sigmoid", "relu"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "gru_recurrent_activation_1", "default": "sigmoid", "conditions": [], "values": ["sigmoid", "tanh", "relu"], "ordered": false}}, {"class_name": "Float", "config": {"name": "gru_recurrent_dropout_1", "default": 0.0, "conditions": [], "min_value": 0.0, "max_value": 0.5, "step": 0.05, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "gru_dropout_1", "default": 0.0, "conditions": [], "min_value": 0.0, "max_value": 0.5, "step": 0.05, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "gru_units_2", "default": null, "conditions": [], "min_value": 32, "max_value": 256, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "gru_activation_2", "default": "tanh", "conditions": [], "values": ["tanh", "sigmoid", "relu"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "gru_recurrent_activation_2", "default": "sigmoid", "conditions": [], "values": ["sigmoid", "tanh", "relu"], "ordered": false}}, {"class_name": "Float", "config": {"name": "gru_recurrent_dropout_2", "default": 0.0, "conditions": [], "min_value": 0.0, "max_value": 0.5, "step": 0.05, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "gru_dropout_2", "default": 0.0, "conditions": [], "min_value": 0.0, "max_value": 0.5, "step": 0.05, "sampling": "linear"}}], "values": {"num_gru_layers": 1, "gru_units_0": 64, "gru_activation_0": "sigmoid", "gru_recurrent_activation_0": "relu", "gru_recurrent_dropout_0": 0.45, "gru_return_sequences": true, "gru_dropout_0": 0.35000000000000003, "dense_units": 3, "dense_activation": "tanh", "optimizer": "ftrl", "gru_units_1": 128, "gru_activation_1": "relu", "gru_recurrent_activation_1": "relu", "gru_recurrent_dropout_1": 0.35000000000000003, "gru_dropout_1": 0.35000000000000003, "gru_units_2": 224, "gru_activation_2": "relu", "gru_recurrent_activation_2": "relu", "gru_recurrent_dropout_2": 0.35000000000000003, "gru_dropout_2": 0.45}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/dist-packages/keras_tuner/src/engine/base_tuner.py\", line 273, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/keras_tuner/src/engine/base_tuner.py\", line 238, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/keras_tuner/src/engine/tuner.py\", line 314, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/keras_tuner/src/engine/tuner.py\", line 233, in _build_and_fit_model\n    results = self.hypermodel.fit(hp, model, *args, **kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/keras_tuner/src/engine/hypermodel.py\", line 149, in fit\n    return model.fit(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/keras/utils/traceback_utils.py\", line 70, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/execute.py\", line 52, in quick_execute\n    tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Graph execution error:\n\nDetected at node 'gradient_tape/mean_squared_error/BroadcastGradientArgs' defined at (most recent call last):\n    File \"/usr/lib/python3.10/runpy.py\", line 196, in _run_module_as_main\n      return _run_code(code, main_globals, None,\n    File \"/usr/lib/python3.10/runpy.py\", line 86, in _run_code\n      exec(code, run_globals)\n    File \"/usr/local/lib/python3.10/dist-packages/colab_kernel_launcher.py\", line 37, in <module>\n      ColabKernelApp.launch_instance()\n    File \"/usr/local/lib/python3.10/dist-packages/traitlets/config/application.py\", line 992, in launch_instance\n      app.start()\n    File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelapp.py\", line 619, in start\n      self.io_loop.start()\n    File \"/usr/local/lib/python3.10/dist-packages/tornado/platform/asyncio.py\", line 195, in start\n      self.asyncio_loop.run_forever()\n    File \"/usr/lib/python3.10/asyncio/base_events.py\", line 603, in run_forever\n      self._run_once()\n    File \"/usr/lib/python3.10/asyncio/base_events.py\", line 1909, in _run_once\n      handle._run()\n    File \"/usr/lib/python3.10/asyncio/events.py\", line 80, in _run\n      self._context.run(self._callback, *self._args)\n    File \"/usr/local/lib/python3.10/dist-packages/tornado/ioloop.py\", line 685, in <lambda>\n      lambda f: self._run_callback(functools.partial(callback, future))\n    File \"/usr/local/lib/python3.10/dist-packages/tornado/ioloop.py\", line 738, in _run_callback\n      ret = callback()\n    File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 825, in inner\n      self.ctx_run(self.run)\n    File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 786, in run\n      yielded = self.gen.send(value)\n    File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\", line 361, in process_one\n      yield gen.maybe_future(dispatch(*args))\n    File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 234, in wrapper\n      yielded = ctx_run(next, result)\n    File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\", line 261, in dispatch_shell\n      yield gen.maybe_future(handler(stream, idents, msg))\n    File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 234, in wrapper\n      yielded = ctx_run(next, result)\n    File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\", line 539, in execute_request\n      self.do_execute(\n    File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 234, in wrapper\n      yielded = ctx_run(next, result)\n    File \"/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py\", line 302, in do_execute\n      res = shell.run_cell(code, store_history=store_history, silent=silent)\n    File \"/usr/local/lib/python3.10/dist-packages/ipykernel/zmqshell.py\", line 539, in run_cell\n      return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)\n    File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 2975, in run_cell\n      result = self._run_cell(\n    File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3030, in _run_cell\n      return runner(coro)\n    File \"/usr/local/lib/python3.10/dist-packages/IPython/core/async_helpers.py\", line 78, in _pseudo_sync_runner\n      coro.send(None)\n    File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3257, in run_cell_async\n      has_raised = await self.run_ast_nodes(code_ast.body, cell_name,\n    File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3473, in run_ast_nodes\n      if (await self.run_code(code, result,  async_=asy)):\n    File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3553, in run_code\n      exec(code_obj, self.user_global_ns, self.user_ns)\n    File \"<ipython-input-63-6b852f5ba997>\", line 20, in <cell line: 4>\n      tuner.search(data_preprocessor.X_train_seq, data_preprocessor.y_train_seq, epochs=20, validation_split=0.2, callbacks=[early_stopping_callback,lr_schedule])\n    File \"/usr/local/lib/python3.10/dist-packages/keras_tuner/src/engine/base_tuner.py\", line 233, in search\n      self._try_run_and_update_trial(trial, *fit_args, **fit_kwargs)\n    File \"/usr/local/lib/python3.10/dist-packages/keras_tuner/src/engine/base_tuner.py\", line 273, in _try_run_and_update_trial\n      self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n    File \"/usr/local/lib/python3.10/dist-packages/keras_tuner/src/engine/base_tuner.py\", line 238, in _run_and_update_trial\n      results = self.run_trial(trial, *fit_args, **fit_kwargs)\n    File \"/usr/local/lib/python3.10/dist-packages/keras_tuner/src/engine/tuner.py\", line 314, in run_trial\n      obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n    File \"/usr/local/lib/python3.10/dist-packages/keras_tuner/src/engine/tuner.py\", line 233, in _build_and_fit_model\n      results = self.hypermodel.fit(hp, model, *args, **kwargs)\n    File \"/usr/local/lib/python3.10/dist-packages/keras_tuner/src/engine/hypermodel.py\", line 149, in fit\n      return model.fit(*args, **kwargs)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/utils/traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/engine/training.py\", line 1685, in fit\n      tmp_logs = self.train_function(iterator)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/engine/training.py\", line 1284, in train_function\n      return step_function(self, iterator)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/engine/training.py\", line 1268, in step_function\n      outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.10/dist-packages/keras/engine/training.py\", line 1249, in run_step\n      outputs = model.train_step(data)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/engine/training.py\", line 1054, in train_step\n      self.optimizer.minimize(loss, self.trainable_variables, tape=tape)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/optimizers/optimizer.py\", line 542, in minimize\n      grads_and_vars = self.compute_gradients(loss, var_list, tape)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/optimizers/optimizer.py\", line 275, in compute_gradients\n      grads = tape.gradient(loss, var_list)\nNode: 'gradient_tape/mean_squared_error/BroadcastGradientArgs'\nIncompatible shapes: [32,10,3] vs. [32,1]\n\t [[{{node gradient_tape/mean_squared_error/BroadcastGradientArgs}}]] [Op:__inference_train_function_1364927]\n"}